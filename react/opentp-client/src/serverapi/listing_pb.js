/* eslint-disable */
// source: listing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var instrument_pb = require('./instrument_pb.js');
goog.object.extend(proto, instrument_pb);
var market_pb = require('./market_pb.js');
goog.object.extend(proto, market_pb);
var modelcommon_pb = require('./modelcommon_pb.js');
goog.object.extend(proto, modelcommon_pb);
goog.exportSymbol('proto.model.Listing', null, global);
goog.exportSymbol('proto.model.TickSizeEntry', null, global);
goog.exportSymbol('proto.model.TickSizeTable', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Listing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.Listing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.Listing.displayName = 'proto.model.Listing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.TickSizeTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.TickSizeTable.repeatedFields_, null);
};
goog.inherits(proto.model.TickSizeTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.TickSizeTable.displayName = 'proto.model.TickSizeTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.TickSizeEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.TickSizeEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.TickSizeEntry.displayName = 'proto.model.TickSizeEntry';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Listing.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Listing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Listing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Listing.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    market: (f = msg.getMarket()) && market_pb.Market.toObject(includeInstance, f),
    instrument: (f = msg.getInstrument()) && instrument_pb.Instrument.toObject(includeInstance, f),
    marketsymbol: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ticksize: (f = msg.getTicksize()) && proto.model.TickSizeTable.toObject(includeInstance, f),
    sizeincrement: (f = msg.getSizeincrement()) && modelcommon_pb.Decimal64.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Listing}
 */
proto.model.Listing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Listing;
  return proto.model.Listing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Listing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Listing}
 */
proto.model.Listing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = new market_pb.Market;
      reader.readMessage(value,market_pb.Market.deserializeBinaryFromReader);
      msg.setMarket(value);
      break;
    case 4:
      var value = new instrument_pb.Instrument;
      reader.readMessage(value,instrument_pb.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketsymbol(value);
      break;
    case 6:
      var value = new proto.model.TickSizeTable;
      reader.readMessage(value,proto.model.TickSizeTable.deserializeBinaryFromReader);
      msg.setTicksize(value);
      break;
    case 7:
      var value = new modelcommon_pb.Decimal64;
      reader.readMessage(value,modelcommon_pb.Decimal64.deserializeBinaryFromReader);
      msg.setSizeincrement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Listing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Listing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Listing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Listing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMarket();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      market_pb.Market.serializeBinaryToWriter
    );
  }
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      instrument_pb.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getMarketsymbol();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTicksize();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.model.TickSizeTable.serializeBinaryToWriter
    );
  }
  f = message.getSizeincrement();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      modelcommon_pb.Decimal64.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.model.Listing.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.Listing} returns this
 */
proto.model.Listing.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.model.Listing.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.Listing} returns this
 */
proto.model.Listing.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Market market = 3;
 * @return {?proto.model.Market}
 */
proto.model.Listing.prototype.getMarket = function() {
  return /** @type{?proto.model.Market} */ (
    jspb.Message.getWrapperField(this, market_pb.Market, 3));
};


/**
 * @param {?proto.model.Market|undefined} value
 * @return {!proto.model.Listing} returns this
*/
proto.model.Listing.prototype.setMarket = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.Listing} returns this
 */
proto.model.Listing.prototype.clearMarket = function() {
  return this.setMarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Listing.prototype.hasMarket = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Instrument instrument = 4;
 * @return {?proto.model.Instrument}
 */
proto.model.Listing.prototype.getInstrument = function() {
  return /** @type{?proto.model.Instrument} */ (
    jspb.Message.getWrapperField(this, instrument_pb.Instrument, 4));
};


/**
 * @param {?proto.model.Instrument|undefined} value
 * @return {!proto.model.Listing} returns this
*/
proto.model.Listing.prototype.setInstrument = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.Listing} returns this
 */
proto.model.Listing.prototype.clearInstrument = function() {
  return this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Listing.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string marketSymbol = 5;
 * @return {string}
 */
proto.model.Listing.prototype.getMarketsymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.Listing} returns this
 */
proto.model.Listing.prototype.setMarketsymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional TickSizeTable tickSize = 6;
 * @return {?proto.model.TickSizeTable}
 */
proto.model.Listing.prototype.getTicksize = function() {
  return /** @type{?proto.model.TickSizeTable} */ (
    jspb.Message.getWrapperField(this, proto.model.TickSizeTable, 6));
};


/**
 * @param {?proto.model.TickSizeTable|undefined} value
 * @return {!proto.model.Listing} returns this
*/
proto.model.Listing.prototype.setTicksize = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.Listing} returns this
 */
proto.model.Listing.prototype.clearTicksize = function() {
  return this.setTicksize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Listing.prototype.hasTicksize = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Decimal64 sizeIncrement = 7;
 * @return {?proto.model.Decimal64}
 */
proto.model.Listing.prototype.getSizeincrement = function() {
  return /** @type{?proto.model.Decimal64} */ (
    jspb.Message.getWrapperField(this, modelcommon_pb.Decimal64, 7));
};


/**
 * @param {?proto.model.Decimal64|undefined} value
 * @return {!proto.model.Listing} returns this
*/
proto.model.Listing.prototype.setSizeincrement = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.Listing} returns this
 */
proto.model.Listing.prototype.clearSizeincrement = function() {
  return this.setSizeincrement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Listing.prototype.hasSizeincrement = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.TickSizeTable.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.TickSizeTable.prototype.toObject = function(opt_includeInstance) {
  return proto.model.TickSizeTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.TickSizeTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.TickSizeTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.model.TickSizeEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.TickSizeTable}
 */
proto.model.TickSizeTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.TickSizeTable;
  return proto.model.TickSizeTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.TickSizeTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.TickSizeTable}
 */
proto.model.TickSizeTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.TickSizeEntry;
      reader.readMessage(value,proto.model.TickSizeEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.TickSizeTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.TickSizeTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.TickSizeTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.TickSizeTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.TickSizeEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TickSizeEntry entries = 1;
 * @return {!Array<!proto.model.TickSizeEntry>}
 */
proto.model.TickSizeTable.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.model.TickSizeEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.TickSizeEntry, 1));
};


/**
 * @param {!Array<!proto.model.TickSizeEntry>} value
 * @return {!proto.model.TickSizeTable} returns this
*/
proto.model.TickSizeTable.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.TickSizeEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.TickSizeEntry}
 */
proto.model.TickSizeTable.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.TickSizeEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.model.TickSizeTable} returns this
 */
proto.model.TickSizeTable.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.TickSizeEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.model.TickSizeEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.TickSizeEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.TickSizeEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    lowerpricebound: (f = msg.getLowerpricebound()) && modelcommon_pb.Decimal64.toObject(includeInstance, f),
    upperpricebound: (f = msg.getUpperpricebound()) && modelcommon_pb.Decimal64.toObject(includeInstance, f),
    ticksize: (f = msg.getTicksize()) && modelcommon_pb.Decimal64.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.TickSizeEntry}
 */
proto.model.TickSizeEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.TickSizeEntry;
  return proto.model.TickSizeEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.TickSizeEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.TickSizeEntry}
 */
proto.model.TickSizeEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modelcommon_pb.Decimal64;
      reader.readMessage(value,modelcommon_pb.Decimal64.deserializeBinaryFromReader);
      msg.setLowerpricebound(value);
      break;
    case 2:
      var value = new modelcommon_pb.Decimal64;
      reader.readMessage(value,modelcommon_pb.Decimal64.deserializeBinaryFromReader);
      msg.setUpperpricebound(value);
      break;
    case 3:
      var value = new modelcommon_pb.Decimal64;
      reader.readMessage(value,modelcommon_pb.Decimal64.deserializeBinaryFromReader);
      msg.setTicksize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.TickSizeEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.TickSizeEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.TickSizeEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.TickSizeEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLowerpricebound();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modelcommon_pb.Decimal64.serializeBinaryToWriter
    );
  }
  f = message.getUpperpricebound();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modelcommon_pb.Decimal64.serializeBinaryToWriter
    );
  }
  f = message.getTicksize();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modelcommon_pb.Decimal64.serializeBinaryToWriter
    );
  }
};


/**
 * optional Decimal64 lowerPriceBound = 1;
 * @return {?proto.model.Decimal64}
 */
proto.model.TickSizeEntry.prototype.getLowerpricebound = function() {
  return /** @type{?proto.model.Decimal64} */ (
    jspb.Message.getWrapperField(this, modelcommon_pb.Decimal64, 1));
};


/**
 * @param {?proto.model.Decimal64|undefined} value
 * @return {!proto.model.TickSizeEntry} returns this
*/
proto.model.TickSizeEntry.prototype.setLowerpricebound = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.TickSizeEntry} returns this
 */
proto.model.TickSizeEntry.prototype.clearLowerpricebound = function() {
  return this.setLowerpricebound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.TickSizeEntry.prototype.hasLowerpricebound = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Decimal64 upperPriceBound = 2;
 * @return {?proto.model.Decimal64}
 */
proto.model.TickSizeEntry.prototype.getUpperpricebound = function() {
  return /** @type{?proto.model.Decimal64} */ (
    jspb.Message.getWrapperField(this, modelcommon_pb.Decimal64, 2));
};


/**
 * @param {?proto.model.Decimal64|undefined} value
 * @return {!proto.model.TickSizeEntry} returns this
*/
proto.model.TickSizeEntry.prototype.setUpperpricebound = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.TickSizeEntry} returns this
 */
proto.model.TickSizeEntry.prototype.clearUpperpricebound = function() {
  return this.setUpperpricebound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.TickSizeEntry.prototype.hasUpperpricebound = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Decimal64 tickSize = 3;
 * @return {?proto.model.Decimal64}
 */
proto.model.TickSizeEntry.prototype.getTicksize = function() {
  return /** @type{?proto.model.Decimal64} */ (
    jspb.Message.getWrapperField(this, modelcommon_pb.Decimal64, 3));
};


/**
 * @param {?proto.model.Decimal64|undefined} value
 * @return {!proto.model.TickSizeEntry} returns this
*/
proto.model.TickSizeEntry.prototype.setTicksize = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.TickSizeEntry} returns this
 */
proto.model.TickSizeEntry.prototype.clearTicksize = function() {
  return this.setTicksize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.TickSizeEntry.prototype.hasTicksize = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.model);
